The paper I read is Best Practice for Scientific Computing by Greg Wilson, D.A. Aruliah, C. Titus Brown, Neil P. Chue Hong, and so on. This paper indicated building scientific software should be carefully and seriously to avoid errors happened when, revise, reuse and improve the software. Therefore, the author provides and explains 10 practices that we help as to reduce the probability that error happened. 
I think currently I have used several practices that the author mentioned, such as ‘Write programs for People, not Computer’ and Document Design and Purpose, not mechanics. I think I need to thanks to the professor who taught me the first course of programming. The professor taught us the good behaviors similar as how the author describe in practice 1 and 10 . Although I haven’t written very complicated scientific software, but I gain benefit each time when I reviewed my code that I wrote before. Usually, I feel this behavior saved me lots of time on reminding and understanding the code. 
In addition to that, about version control, what I learnt from my personal experience is when it comes to collaborating, version control is important. For example, before the beginning to use google doc, when I wrote documents with my teammates, we often worked on our own task first. In the end, we would sit together and merged the document content. However, this is way less efficient than with version control features google docs provided. As we can track our changes, we don't have to rename our document at the time of our meeting just to track what's the progress we made so far. Also, as we are using git for this course, I can edit the content on one machine and push changes to remote branch then continue working on it with another machine later by simply pulling the change. Without it I would have to store all my changes in an email draft.
I think this suggestions are very useful, but it will take time to get to used them and let them become our behavior.
